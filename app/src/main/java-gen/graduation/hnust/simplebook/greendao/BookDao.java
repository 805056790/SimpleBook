package graduation.hnust.simplebook.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import graduation.hnust.simplebook.model.Book;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BOOK".
*/
public class BookDao extends AbstractDao<Book, Long> {

    public static final String TABLENAME = "BOOK";

    /**
     * Properties of entity Book.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, Long.class, "userId", false, "USER_ID");
        public final static Property Type = new Property(2, Integer.class, "type", false, "TYPE");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property IsDefault = new Property(4, Boolean.class, "isDefault", false, "IS_DEFAULT");
        public final static Property Status = new Property(5, Integer.class, "status", false, "STATUS");
        public final static Property Budget = new Property(6, Integer.class, "budget", false, "BUDGET");
        public final static Property SettlementTime = new Property(7, java.util.Date.class, "settlementTime", false, "SETTLEMENT_TIME");
        public final static Property IdRemind = new Property(8, Boolean.class, "idRemind", false, "ID_REMIND");
        public final static Property Color = new Property(9, String.class, "color", false, "COLOR");
        public final static Property StoreType = new Property(10, Integer.class, "storeType", false, "STORE_TYPE");
        public final static Property CreatedAt = new Property(11, java.util.Date.class, "createdAt", false, "CREATED_AT");
        public final static Property UpdatedAt = new Property(12, java.util.Date.class, "updatedAt", false, "UPDATED_AT");
    };


    public BookDao(DaoConfig config) {
        super(config);
    }
    
    public BookDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BOOK\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_ID\" INTEGER," + // 1: userId
                "\"TYPE\" INTEGER," + // 2: type
                "\"NAME\" TEXT," + // 3: name
                "\"IS_DEFAULT\" INTEGER," + // 4: isDefault
                "\"STATUS\" INTEGER," + // 5: status
                "\"BUDGET\" INTEGER," + // 6: budget
                "\"SETTLEMENT_TIME\" INTEGER," + // 7: settlementTime
                "\"ID_REMIND\" INTEGER," + // 8: idRemind
                "\"COLOR\" TEXT," + // 9: color
                "\"STORE_TYPE\" INTEGER," + // 10: storeType
                "\"CREATED_AT\" INTEGER," + // 11: createdAt
                "\"UPDATED_AT\" INTEGER);"); // 12: updatedAt
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BOOK\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Book entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(2, userId);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(3, type);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        Boolean isDefault = entity.getIsDefault();
        if (isDefault != null) {
            stmt.bindLong(5, isDefault ? 1L: 0L);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(6, status);
        }
 
        Integer budget = entity.getBudget();
        if (budget != null) {
            stmt.bindLong(7, budget);
        }
 
        java.util.Date settlementTime = entity.getSettlementTime();
        if (settlementTime != null) {
            stmt.bindLong(8, settlementTime.getTime());
        }
 
        Boolean idRemind = entity.getIdRemind();
        if (idRemind != null) {
            stmt.bindLong(9, idRemind ? 1L: 0L);
        }
 
        String color = entity.getColor();
        if (color != null) {
            stmt.bindString(10, color);
        }
 
        Integer storeType = entity.getStoreType();
        if (storeType != null) {
            stmt.bindLong(11, storeType);
        }
 
        java.util.Date createdAt = entity.getCreatedAt();
        if (createdAt != null) {
            stmt.bindLong(12, createdAt.getTime());
        }
 
        java.util.Date updatedAt = entity.getUpdatedAt();
        if (updatedAt != null) {
            stmt.bindLong(13, updatedAt.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Book readEntity(Cursor cursor, int offset) {
        Book entity = new Book( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // type
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0, // isDefault
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // status
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // budget
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)), // settlementTime
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0, // idRemind
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // color
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // storeType
            cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)), // createdAt
            cursor.isNull(offset + 12) ? null : new java.util.Date(cursor.getLong(offset + 12)) // updatedAt
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Book entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setType(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIsDefault(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
        entity.setStatus(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setBudget(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setSettlementTime(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
        entity.setIdRemind(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
        entity.setColor(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setStoreType(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setCreatedAt(cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)));
        entity.setUpdatedAt(cursor.isNull(offset + 12) ? null : new java.util.Date(cursor.getLong(offset + 12)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Book entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Book entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
