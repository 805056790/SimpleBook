package graduation.hnust.simplebook.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import graduation.hnust.simplebook.model.AccountRemind;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ACCOUNT_REMIND".
*/
public class AccountRemindDao extends AbstractDao<AccountRemind, Long> {

    public static final String TABLENAME = "ACCOUNT_REMIND";

    /**
     * Properties of entity AccountRemind.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, Long.class, "userId", false, "USER_ID");
        public final static Property BookId = new Property(2, Long.class, "bookId", false, "BOOK_ID");
        public final static Property Type = new Property(3, Integer.class, "type", false, "TYPE");
        public final static Property Status = new Property(4, Integer.class, "status", false, "STATUS");
        public final static Property Name = new Property(5, String.class, "name", false, "NAME");
        public final static Property EndTime = new Property(6, java.util.Date.class, "endTime", false, "END_TIME");
        public final static Property RemindTime = new Property(7, java.util.Date.class, "remindTime", false, "REMIND_TIME");
        public final static Property RepeatTime = new Property(8, Integer.class, "repeatTime", false, "REPEAT_TIME");
        public final static Property Amount = new Property(9, Integer.class, "amount", false, "AMOUNT");
        public final static Property IsAutoMark = new Property(10, Boolean.class, "isAutoMark", false, "IS_AUTO_MARK");
        public final static Property ConsumeType = new Property(11, Integer.class, "consumeType", false, "CONSUME_TYPE");
        public final static Property CreatedAt = new Property(12, java.util.Date.class, "createdAt", false, "CREATED_AT");
        public final static Property UpdatedAt = new Property(13, java.util.Date.class, "updatedAt", false, "UPDATED_AT");
    };


    public AccountRemindDao(DaoConfig config) {
        super(config);
    }
    
    public AccountRemindDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ACCOUNT_REMIND\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_ID\" INTEGER," + // 1: userId
                "\"BOOK_ID\" INTEGER," + // 2: bookId
                "\"TYPE\" INTEGER," + // 3: type
                "\"STATUS\" INTEGER," + // 4: status
                "\"NAME\" TEXT," + // 5: name
                "\"END_TIME\" INTEGER," + // 6: endTime
                "\"REMIND_TIME\" INTEGER," + // 7: remindTime
                "\"REPEAT_TIME\" INTEGER," + // 8: repeatTime
                "\"AMOUNT\" INTEGER," + // 9: amount
                "\"IS_AUTO_MARK\" INTEGER," + // 10: isAutoMark
                "\"CONSUME_TYPE\" INTEGER," + // 11: consumeType
                "\"CREATED_AT\" INTEGER," + // 12: createdAt
                "\"UPDATED_AT\" INTEGER);"); // 13: updatedAt
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ACCOUNT_REMIND\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, AccountRemind entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(2, userId);
        }
 
        Long bookId = entity.getBookId();
        if (bookId != null) {
            stmt.bindLong(3, bookId);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(4, type);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(5, status);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(6, name);
        }
 
        java.util.Date endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindLong(7, endTime.getTime());
        }
 
        java.util.Date remindTime = entity.getRemindTime();
        if (remindTime != null) {
            stmt.bindLong(8, remindTime.getTime());
        }
 
        Integer repeatTime = entity.getRepeatTime();
        if (repeatTime != null) {
            stmt.bindLong(9, repeatTime);
        }
 
        Integer amount = entity.getAmount();
        if (amount != null) {
            stmt.bindLong(10, amount);
        }
 
        Boolean isAutoMark = entity.getIsAutoMark();
        if (isAutoMark != null) {
            stmt.bindLong(11, isAutoMark ? 1L: 0L);
        }
 
        Integer consumeType = entity.getConsumeType();
        if (consumeType != null) {
            stmt.bindLong(12, consumeType);
        }
 
        java.util.Date createdAt = entity.getCreatedAt();
        if (createdAt != null) {
            stmt.bindLong(13, createdAt.getTime());
        }
 
        java.util.Date updatedAt = entity.getUpdatedAt();
        if (updatedAt != null) {
            stmt.bindLong(14, updatedAt.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public AccountRemind readEntity(Cursor cursor, int offset) {
        AccountRemind entity = new AccountRemind( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // bookId
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // type
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // status
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // name
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)), // endTime
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)), // remindTime
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // repeatTime
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // amount
            cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0, // isAutoMark
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // consumeType
            cursor.isNull(offset + 12) ? null : new java.util.Date(cursor.getLong(offset + 12)), // createdAt
            cursor.isNull(offset + 13) ? null : new java.util.Date(cursor.getLong(offset + 13)) // updatedAt
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, AccountRemind entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setBookId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setType(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setStatus(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setEndTime(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
        entity.setRemindTime(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
        entity.setRepeatTime(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setAmount(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setIsAutoMark(cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0);
        entity.setConsumeType(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setCreatedAt(cursor.isNull(offset + 12) ? null : new java.util.Date(cursor.getLong(offset + 12)));
        entity.setUpdatedAt(cursor.isNull(offset + 13) ? null : new java.util.Date(cursor.getLong(offset + 13)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(AccountRemind entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(AccountRemind entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
