package graduation.hnust.simplebook.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import graduation.hnust.simplebook.model.Item;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ITEM".
*/
public class ItemDao extends AbstractDao<Item, Long> {

    public static final String TABLENAME = "ITEM";

    /**
     * Properties of entity Item.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, Long.class, "userId", false, "USER_ID");
        public final static Property BookId = new Property(2, Long.class, "bookId", false, "BOOK_ID");
        public final static Property Type = new Property(3, Integer.class, "type", false, "TYPE");
        public final static Property Status = new Property(4, Integer.class, "status", false, "STATUS");
        public final static Property Image = new Property(5, String.class, "image", false, "IMAGE");
        public final static Property ImageId = new Property(6, Integer.class, "imageId", false, "IMAGE_ID");
        public final static Property Date = new Property(7, java.util.Date.class, "date", false, "DATE");
        public final static Property Note = new Property(8, String.class, "note", false, "NOTE");
        public final static Property ConsumeType = new Property(9, Integer.class, "consumeType", false, "CONSUME_TYPE");
        public final static Property Amount = new Property(10, Integer.class, "amount", false, "AMOUNT");
        public final static Property Longitude = new Property(11, String.class, "longitude", false, "LONGITUDE");
        public final static Property Latitude = new Property(12, String.class, "latitude", false, "LATITUDE");
        public final static Property CreatedAt = new Property(13, java.util.Date.class, "createdAt", false, "CREATED_AT");
        public final static Property UpdatedAt = new Property(14, java.util.Date.class, "updatedAt", false, "UPDATED_AT");
    };


    public ItemDao(DaoConfig config) {
        super(config);
    }
    
    public ItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ITEM\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_ID\" INTEGER," + // 1: userId
                "\"BOOK_ID\" INTEGER," + // 2: bookId
                "\"TYPE\" INTEGER," + // 3: type
                "\"STATUS\" INTEGER," + // 4: status
                "\"IMAGE\" TEXT," + // 5: image
                "\"IMAGE_ID\" INTEGER," + // 6: imageId
                "\"DATE\" INTEGER," + // 7: date
                "\"NOTE\" TEXT," + // 8: note
                "\"CONSUME_TYPE\" INTEGER," + // 9: consumeType
                "\"AMOUNT\" INTEGER," + // 10: amount
                "\"LONGITUDE\" TEXT," + // 11: longitude
                "\"LATITUDE\" TEXT," + // 12: latitude
                "\"CREATED_AT\" INTEGER," + // 13: createdAt
                "\"UPDATED_AT\" INTEGER);"); // 14: updatedAt
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ITEM\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Item entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(2, userId);
        }
 
        Long bookId = entity.getBookId();
        if (bookId != null) {
            stmt.bindLong(3, bookId);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(4, type);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(5, status);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(6, image);
        }
 
        Integer imageId = entity.getImageId();
        if (imageId != null) {
            stmt.bindLong(7, imageId);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(8, date.getTime());
        }
 
        String note = entity.getNote();
        if (note != null) {
            stmt.bindString(9, note);
        }
 
        Integer consumeType = entity.getConsumeType();
        if (consumeType != null) {
            stmt.bindLong(10, consumeType);
        }
 
        Integer amount = entity.getAmount();
        if (amount != null) {
            stmt.bindLong(11, amount);
        }
 
        String longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindString(12, longitude);
        }
 
        String latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindString(13, latitude);
        }
 
        java.util.Date createdAt = entity.getCreatedAt();
        if (createdAt != null) {
            stmt.bindLong(14, createdAt.getTime());
        }
 
        java.util.Date updatedAt = entity.getUpdatedAt();
        if (updatedAt != null) {
            stmt.bindLong(15, updatedAt.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Item readEntity(Cursor cursor, int offset) {
        Item entity = new Item( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // bookId
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // type
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // status
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // image
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // imageId
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)), // date
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // note
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // consumeType
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // amount
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // longitude
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // latitude
            cursor.isNull(offset + 13) ? null : new java.util.Date(cursor.getLong(offset + 13)), // createdAt
            cursor.isNull(offset + 14) ? null : new java.util.Date(cursor.getLong(offset + 14)) // updatedAt
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Item entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setBookId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setType(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setStatus(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setImage(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setImageId(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setDate(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
        entity.setNote(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setConsumeType(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setAmount(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setLongitude(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setLatitude(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setCreatedAt(cursor.isNull(offset + 13) ? null : new java.util.Date(cursor.getLong(offset + 13)));
        entity.setUpdatedAt(cursor.isNull(offset + 14) ? null : new java.util.Date(cursor.getLong(offset + 14)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Item entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Item entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
