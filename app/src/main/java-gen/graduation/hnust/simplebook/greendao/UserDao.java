package graduation.hnust.simplebook.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import graduation.hnust.simplebook.model.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserName = new Property(1, String.class, "userName", false, "USER_NAME");
        public final static Property Mobile = new Property(2, String.class, "mobile", false, "MOBILE");
        public final static Property Email = new Property(3, String.class, "email", false, "EMAIL");
        public final static Property Password = new Property(4, String.class, "password", false, "PASSWORD");
        public final static Property Status = new Property(5, Integer.class, "status", false, "STATUS");
        public final static Property QqToken = new Property(6, String.class, "QqToken", false, "QQ_TOKEN");
        public final static Property WeixinToken = new Property(7, String.class, "weixinToken", false, "WEIXIN_TOKEN");
        public final static Property WeiboToken = new Property(8, String.class, "weiboToken", false, "WEIBO_TOKEN");
        public final static Property Nickname = new Property(9, String.class, "nickname", false, "NICKNAME");
        public final static Property Type = new Property(10, Integer.class, "type", false, "TYPE");
        public final static Property Gender = new Property(11, Integer.class, "gender", false, "GENDER");
        public final static Property Birthday = new Property(12, java.util.Date.class, "birthday", false, "BIRTHDAY");
        public final static Property Image = new Property(13, String.class, "image", false, "IMAGE");
        public final static Property CreatedAt = new Property(14, java.util.Date.class, "createdAt", false, "CREATED_AT");
        public final static Property UpdatedAt = new Property(15, java.util.Date.class, "updatedAt", false, "UPDATED_AT");
    };


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_NAME\" TEXT," + // 1: userName
                "\"MOBILE\" TEXT," + // 2: mobile
                "\"EMAIL\" TEXT," + // 3: email
                "\"PASSWORD\" TEXT," + // 4: password
                "\"STATUS\" INTEGER," + // 5: status
                "\"QQ_TOKEN\" TEXT," + // 6: QqToken
                "\"WEIXIN_TOKEN\" TEXT," + // 7: weixinToken
                "\"WEIBO_TOKEN\" TEXT," + // 8: weiboToken
                "\"NICKNAME\" TEXT," + // 9: nickname
                "\"TYPE\" INTEGER," + // 10: type
                "\"GENDER\" INTEGER," + // 11: gender
                "\"BIRTHDAY\" INTEGER," + // 12: birthday
                "\"IMAGE\" TEXT," + // 13: image
                "\"CREATED_AT\" INTEGER," + // 14: createdAt
                "\"UPDATED_AT\" INTEGER);"); // 15: updatedAt
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(2, userName);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(3, mobile);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(4, email);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(5, password);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(6, status);
        }
 
        String QqToken = entity.getQqToken();
        if (QqToken != null) {
            stmt.bindString(7, QqToken);
        }
 
        String weixinToken = entity.getWeixinToken();
        if (weixinToken != null) {
            stmt.bindString(8, weixinToken);
        }
 
        String weiboToken = entity.getWeiboToken();
        if (weiboToken != null) {
            stmt.bindString(9, weiboToken);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(10, nickname);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(11, type);
        }
 
        Integer gender = entity.getGender();
        if (gender != null) {
            stmt.bindLong(12, gender);
        }
 
        java.util.Date birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindLong(13, birthday.getTime());
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(14, image);
        }
 
        java.util.Date createdAt = entity.getCreatedAt();
        if (createdAt != null) {
            stmt.bindLong(15, createdAt.getTime());
        }
 
        java.util.Date updatedAt = entity.getUpdatedAt();
        if (updatedAt != null) {
            stmt.bindLong(16, updatedAt.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // mobile
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // email
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // password
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // status
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // QqToken
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // weixinToken
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // weiboToken
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // nickname
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // type
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // gender
            cursor.isNull(offset + 12) ? null : new java.util.Date(cursor.getLong(offset + 12)), // birthday
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // image
            cursor.isNull(offset + 14) ? null : new java.util.Date(cursor.getLong(offset + 14)), // createdAt
            cursor.isNull(offset + 15) ? null : new java.util.Date(cursor.getLong(offset + 15)) // updatedAt
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMobile(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setEmail(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPassword(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setStatus(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setQqToken(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setWeixinToken(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setWeiboToken(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setNickname(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setType(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setGender(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setBirthday(cursor.isNull(offset + 12) ? null : new java.util.Date(cursor.getLong(offset + 12)));
        entity.setImage(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setCreatedAt(cursor.isNull(offset + 14) ? null : new java.util.Date(cursor.getLong(offset + 14)));
        entity.setUpdatedAt(cursor.isNull(offset + 15) ? null : new java.util.Date(cursor.getLong(offset + 15)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
