package graduation.hnust.simplebook.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import graduation.hnust.simplebook.model.QQTokenModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "QQTOKEN_MODEL".
*/
public class QQTokenModelDao extends AbstractDao<QQTokenModel, Long> {

    public static final String TABLENAME = "QQTOKEN_MODEL";

    /**
     * Properties of entity QQTokenModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, Long.class, "userId", false, "USER_ID");
        public final static Property OpenId = new Property(2, String.class, "openId", false, "OPEN_ID");
        public final static Property AccessToken = new Property(3, String.class, "accessToken", false, "ACCESS_TOKEN");
        public final static Property Ret = new Property(4, String.class, "ret", false, "RET");
        public final static Property PayToken = new Property(5, String.class, "payToken", false, "PAY_TOKEN");
        public final static Property Pf = new Property(6, String.class, "pf", false, "PF");
        public final static Property QueryAuthorityCost = new Property(7, String.class, "queryAuthorityCost", false, "QUERY_AUTHORITY_COST");
        public final static Property ExpiresIn = new Property(8, String.class, "expiresIn", false, "EXPIRES_IN");
        public final static Property PfKey = new Property(9, String.class, "pfKey", false, "PF_KEY");
        public final static Property Msg = new Property(10, String.class, "msg", false, "MSG");
        public final static Property LoginCost = new Property(11, String.class, "loginCost", false, "LOGIN_COST");
        public final static Property CreatedAt = new Property(12, java.util.Date.class, "createdAt", false, "CREATED_AT");
        public final static Property UpdatedAt = new Property(13, java.util.Date.class, "updatedAt", false, "UPDATED_AT");
    };


    public QQTokenModelDao(DaoConfig config) {
        super(config);
    }
    
    public QQTokenModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"QQTOKEN_MODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_ID\" INTEGER," + // 1: userId
                "\"OPEN_ID\" TEXT," + // 2: openId
                "\"ACCESS_TOKEN\" TEXT," + // 3: accessToken
                "\"RET\" TEXT," + // 4: ret
                "\"PAY_TOKEN\" TEXT," + // 5: payToken
                "\"PF\" TEXT," + // 6: pf
                "\"QUERY_AUTHORITY_COST\" TEXT," + // 7: queryAuthorityCost
                "\"EXPIRES_IN\" TEXT," + // 8: expiresIn
                "\"PF_KEY\" TEXT," + // 9: pfKey
                "\"MSG\" TEXT," + // 10: msg
                "\"LOGIN_COST\" TEXT," + // 11: loginCost
                "\"CREATED_AT\" INTEGER," + // 12: createdAt
                "\"UPDATED_AT\" INTEGER);"); // 13: updatedAt
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"QQTOKEN_MODEL\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, QQTokenModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(2, userId);
        }
 
        String openId = entity.getOpenId();
        if (openId != null) {
            stmt.bindString(3, openId);
        }
 
        String accessToken = entity.getAccessToken();
        if (accessToken != null) {
            stmt.bindString(4, accessToken);
        }
 
        String ret = entity.getRet();
        if (ret != null) {
            stmt.bindString(5, ret);
        }
 
        String payToken = entity.getPayToken();
        if (payToken != null) {
            stmt.bindString(6, payToken);
        }
 
        String pf = entity.getPf();
        if (pf != null) {
            stmt.bindString(7, pf);
        }
 
        String queryAuthorityCost = entity.getQueryAuthorityCost();
        if (queryAuthorityCost != null) {
            stmt.bindString(8, queryAuthorityCost);
        }
 
        String expiresIn = entity.getExpiresIn();
        if (expiresIn != null) {
            stmt.bindString(9, expiresIn);
        }
 
        String pfKey = entity.getPfKey();
        if (pfKey != null) {
            stmt.bindString(10, pfKey);
        }
 
        String msg = entity.getMsg();
        if (msg != null) {
            stmt.bindString(11, msg);
        }
 
        String loginCost = entity.getLoginCost();
        if (loginCost != null) {
            stmt.bindString(12, loginCost);
        }
 
        java.util.Date createdAt = entity.getCreatedAt();
        if (createdAt != null) {
            stmt.bindLong(13, createdAt.getTime());
        }
 
        java.util.Date updatedAt = entity.getUpdatedAt();
        if (updatedAt != null) {
            stmt.bindLong(14, updatedAt.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public QQTokenModel readEntity(Cursor cursor, int offset) {
        QQTokenModel entity = new QQTokenModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // openId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // accessToken
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // ret
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // payToken
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // pf
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // queryAuthorityCost
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // expiresIn
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // pfKey
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // msg
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // loginCost
            cursor.isNull(offset + 12) ? null : new java.util.Date(cursor.getLong(offset + 12)), // createdAt
            cursor.isNull(offset + 13) ? null : new java.util.Date(cursor.getLong(offset + 13)) // updatedAt
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, QQTokenModel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setOpenId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAccessToken(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRet(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPayToken(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPf(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setQueryAuthorityCost(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setExpiresIn(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPfKey(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setMsg(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setLoginCost(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setCreatedAt(cursor.isNull(offset + 12) ? null : new java.util.Date(cursor.getLong(offset + 12)));
        entity.setUpdatedAt(cursor.isNull(offset + 13) ? null : new java.util.Date(cursor.getLong(offset + 13)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(QQTokenModel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(QQTokenModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
